/* tslint:disable */
/* eslint-disable */
/**
 * Bus Ticket Booking API
 * API for managing bus ticket booking application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Request object for scheduling a trip
 * @export
 * @interface ScheduledTripRequest
 */
export interface ScheduledTripRequest {
    /**
     * Unique identifier for the bus
     * @type {string}
     * @memberof ScheduledTripRequest
     */
    busNumber: string;
    /**
     * Origin location of the trip
     * @type {string}
     * @memberof ScheduledTripRequest
     */
    origin: string;
    /**
     * Destination location of the trip
     * @type {string}
     * @memberof ScheduledTripRequest
     */
    destination: string;
    /**
     * Departure time of the trip at departure's city time zone
     * @type {string}
     * @memberof ScheduledTripRequest
     */
    departureTime: string;
    /**
     * Days of the week when the trip is scheduled
     * @type {Set<string>}
     * @memberof ScheduledTripRequest
     */
    departureDay: Set<ScheduledTripRequestDepartureDayEnum>;
    /**
     * Start date for the trip schedule in ISO format
     * @type {Date}
     * @memberof ScheduledTripRequest
     */
    fromDate: Date;
    /**
     * End date for the trip schedule in ISO format
     * @type {Date}
     * @memberof ScheduledTripRequest
     */
    toDate: Date;
}


/**
 * @export
 */
export const ScheduledTripRequestDepartureDayEnum = {
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY',
    Sunday: 'SUNDAY'
} as const;
export type ScheduledTripRequestDepartureDayEnum = typeof ScheduledTripRequestDepartureDayEnum[keyof typeof ScheduledTripRequestDepartureDayEnum];


/**
 * Check if a given object implements the ScheduledTripRequest interface.
 */
export function instanceOfScheduledTripRequest(value: object): value is ScheduledTripRequest {
    if (!('busNumber' in value) || value['busNumber'] === undefined) return false;
    if (!('origin' in value) || value['origin'] === undefined) return false;
    if (!('destination' in value) || value['destination'] === undefined) return false;
    if (!('departureTime' in value) || value['departureTime'] === undefined) return false;
    if (!('departureDay' in value) || value['departureDay'] === undefined) return false;
    if (!('fromDate' in value) || value['fromDate'] === undefined) return false;
    if (!('toDate' in value) || value['toDate'] === undefined) return false;
    return true;
}

export function ScheduledTripRequestFromJSON(json: any): ScheduledTripRequest {
    return ScheduledTripRequestFromJSONTyped(json, false);
}

export function ScheduledTripRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScheduledTripRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'busNumber': json['busNumber'],
        'origin': json['origin'],
        'destination': json['destination'],
        'departureTime': json['departureTime'],
        'departureDay': new Set(json['departureDay']),
        'fromDate': (new Date(json['fromDate'])),
        'toDate': (new Date(json['toDate'])),
    };
}

export function ScheduledTripRequestToJSON(json: any): ScheduledTripRequest {
    return ScheduledTripRequestToJSONTyped(json, false);
}

export function ScheduledTripRequestToJSONTyped(value?: ScheduledTripRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'busNumber': value['busNumber'],
        'origin': value['origin'],
        'destination': value['destination'],
        'departureTime': value['departureTime'],
        'departureDay': Array.from(value['departureDay'] as Set<any>),
        'fromDate': ((value['fromDate']).toISOString().substring(0,10)),
        'toDate': ((value['toDate']).toISOString().substring(0,10)),
    };
}

