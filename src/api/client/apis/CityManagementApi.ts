/* tslint:disable */
/* eslint-disable */
/**
 * Bus Ticket Booking API
 * API for managing bus ticket booking application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CityRequest,
  CityResponse,
} from '../models/index';
import {
    CityRequestFromJSON,
    CityRequestToJSON,
    CityResponseFromJSON,
    CityResponseToJSON,
} from '../models/index';

export interface CreateCityRequest {
    cityRequest: CityRequest;
}

/**
 * 
 */
export class CityManagementApi extends runtime.BaseAPI {

    /**
     * Create a new city in the system. Only accessible by users with ADMIN role.
     * Create a new city
     */
    async createCityRaw(requestParameters: CreateCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CityResponse>> {
        if (requestParameters['cityRequest'] == null) {
            throw new runtime.RequiredError(
                'cityRequest',
                'Required parameter "cityRequest" was null or undefined when calling createCity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/cities`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CityRequestToJSON(requestParameters['cityRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CityResponseFromJSON(jsonValue));
    }

    /**
     * Create a new city in the system. Only accessible by users with ADMIN role.
     * Create a new city
     */
    async createCity(requestParameters: CreateCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CityResponse> {
        const response = await this.createCityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all cities in the system.
     * Get all cities
     */
    async getAllCitiesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CityResponse<any>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/cities`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve a list of all cities in the system.
     * Get all cities
     */
    async getAllCities(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CityResponse<any>> {
        const response = await this.getAllCitiesRaw(initOverrides);
        return await response.value();
    }

}
