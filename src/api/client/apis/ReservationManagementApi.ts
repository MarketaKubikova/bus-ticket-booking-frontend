/* tslint:disable */
/* eslint-disable */
/**
 * Bus Ticket Booking API
 * API for managing bus ticket booking application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ReservationRequest,
  ReservationResponse,
} from '../models/index';
import {
    ReservationRequestFromJSON,
    ReservationRequestToJSON,
    ReservationResponseFromJSON,
    ReservationResponseToJSON,
} from '../models/index';

export interface CancelReservationRequest {
    reservationId: number;
}

export interface CreateReservationRequest {
    reservationRequest: ReservationRequest;
}

/**
 * 
 */
export class ReservationManagementApi extends runtime.BaseAPI {

    /**
     * Cancel an existing reservation by its ID. Only accessible by users with USER role.
     * Cancel a reservation
     */
    async cancelReservationRaw(requestParameters: CancelReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['reservationId'] == null) {
            throw new runtime.RequiredError(
                'reservationId',
                'Required parameter "reservationId" was null or undefined when calling cancelReservation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['reservationId'] != null) {
            queryParameters['reservationId'] = requestParameters['reservationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/reservations`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancel an existing reservation by its ID. Only accessible by users with USER role.
     * Cancel a reservation
     */
    async cancelReservation(requestParameters: CancelReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cancelReservationRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new reservation for a scheduled trip.
     * Create a new reservation
     */
    async createReservationRaw(requestParameters: CreateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationResponse>> {
        if (requestParameters['reservationRequest'] == null) {
            throw new runtime.RequiredError(
                'reservationRequest',
                'Required parameter "reservationRequest" was null or undefined when calling createReservation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/reservations`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationRequestToJSON(requestParameters['reservationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationResponseFromJSON(jsonValue));
    }

    /**
     * Create a new reservation for a scheduled trip.
     * Create a new reservation
     */
    async createReservation(requestParameters: CreateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationResponse> {
        const response = await this.createReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all reservations made by the authenticated user. Only accessible by users with USER role.
     * Get all reservations for the authenticated user
     */
    async getUsersReservationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationResponse<any>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/reservations`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve a list of all reservations made by the authenticated user. Only accessible by users with USER role.
     * Get all reservations for the authenticated user
     */
    async getUsersReservations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationResponse<any>> {
        const response = await this.getUsersReservationsRaw(initOverrides);
        return await response.value();
    }

}
