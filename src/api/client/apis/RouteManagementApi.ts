/* tslint:disable */
/* eslint-disable */
/**
 * Bus Ticket Booking API
 * API for managing bus ticket booking application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RouteRequest,
  RouteResponse,
} from '../models/index';
import {
    RouteRequestFromJSON,
    RouteRequestToJSON,
    RouteResponseFromJSON,
    RouteResponseToJSON,
} from '../models/index';

export interface CreateRouteRequest {
    routeRequest: RouteRequest;
}

export interface UpdateBasePriceRequest {
    id: number;
    body: number;
}

/**
 * 
 */
export class RouteManagementApi extends runtime.BaseAPI {

    /**
     * Allows users with ADMIN role to create a new route.
     * Create a new route
     */
    async createRouteRaw(requestParameters: CreateRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RouteResponse>> {
        if (requestParameters['routeRequest'] == null) {
            throw new runtime.RequiredError(
                'routeRequest',
                'Required parameter "routeRequest" was null or undefined when calling createRoute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/routes`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RouteRequestToJSON(requestParameters['routeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RouteResponseFromJSON(jsonValue));
    }

    /**
     * Allows users with ADMIN role to create a new route.
     * Create a new route
     */
    async createRoute(requestParameters: CreateRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RouteResponse> {
        const response = await this.createRouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all routes available in the system.
     * Get all routes
     */
    async getAllRoutesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RouteResponse<any>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/routes`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve a list of all routes available in the system.
     * Get all routes
     */
    async getAllRoutes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RouteResponse<any>> {
        const response = await this.getAllRoutesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Allows users with ADMIN role to update the base price of a specific route.
     * Update base price of a route
     */
    async updateBasePriceRaw(requestParameters: UpdateBasePriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RouteResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateBasePrice().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateBasePrice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/routes/{id}/base-price`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RouteResponseFromJSON(jsonValue));
    }

    /**
     * Allows users with ADMIN role to update the base price of a specific route.
     * Update base price of a route
     */
    async updateBasePrice(requestParameters: UpdateBasePriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RouteResponse> {
        const response = await this.updateBasePriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
