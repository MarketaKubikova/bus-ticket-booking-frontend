/* tslint:disable */
/* eslint-disable */
/**
 * Bus Ticket Booking API
 * API for managing bus ticket booking application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ScheduledTripRequest,
  ScheduledTripResponse,
} from '../models/index';
import {
    ScheduledTripRequestFromJSON,
    ScheduledTripRequestToJSON,
    ScheduledTripResponseFromJSON,
    ScheduledTripResponseToJSON,
} from '../models/index';

export interface CreateScheduledTripRequest {
    scheduledTripRequest: ScheduledTripRequest;
}

export interface SearchScheduledTripsRequest {
    from: string;
    to: string;
    date: Date;
    body: string;
}

/**
 * 
 */
export class ScheduledTripManagementApi extends runtime.BaseAPI {

    /**
     * Create a new scheduled trip based on the provided request.
     * Create Scheduled Trip
     */
    async createScheduledTripRaw(requestParameters: CreateScheduledTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['scheduledTripRequest'] == null) {
            throw new runtime.RequiredError(
                'scheduledTripRequest',
                'Required parameter "scheduledTripRequest" was null or undefined when calling createScheduledTrip().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/scheduled-trips`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScheduledTripRequestToJSON(requestParameters['scheduledTripRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create a new scheduled trip based on the provided request.
     * Create Scheduled Trip
     */
    async createScheduledTrip(requestParameters: CreateScheduledTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createScheduledTripRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for scheduled trips based on origin, destination, and departure date.
     * Search Scheduled Trips
     */
    async searchScheduledTripsRaw(requestParameters: SearchScheduledTripsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduledTripResponse<any>>> {
        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling searchScheduledTrips().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling searchScheduledTrips().'
            );
        }

        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling searchScheduledTrips().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling searchScheduledTrips().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['from'] != null) {
            queryParameters['from'] = requestParameters['from'];
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = requestParameters['to'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = (requestParameters['date'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/scheduled-trips/search`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Search for scheduled trips based on origin, destination, and departure date.
     * Search Scheduled Trips
     */
    async searchScheduledTrips(requestParameters: SearchScheduledTripsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduledTripResponse<any>> {
        const response = await this.searchScheduledTripsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
