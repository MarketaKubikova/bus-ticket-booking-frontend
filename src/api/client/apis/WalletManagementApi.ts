/* tslint:disable */
/* eslint-disable */
/**
 * Bus Ticket Booking API
 * API for managing bus ticket booking application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaymentRequest,
  PaymentResponse,
} from '../models/index';
import {
    PaymentRequestFromJSON,
    PaymentRequestToJSON,
    PaymentResponseFromJSON,
    PaymentResponseToJSON,
} from '../models/index';

export interface RechargeWalletRequest {
    paymentRequest: PaymentRequest;
}

/**
 * 
 */
export class WalletManagementApi extends runtime.BaseAPI {

    /**
     * Allows users to recharge their wallet using various payment methods.
     * Recharge user wallet
     */
    async rechargeWalletRaw(requestParameters: RechargeWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentResponse>> {
        if (requestParameters['paymentRequest'] == null) {
            throw new runtime.RequiredError(
                'paymentRequest',
                'Required parameter "paymentRequest" was null or undefined when calling rechargeWallet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/wallet/recharge`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentRequestToJSON(requestParameters['paymentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentResponseFromJSON(jsonValue));
    }

    /**
     * Allows users to recharge their wallet using various payment methods.
     * Recharge user wallet
     */
    async rechargeWallet(requestParameters: RechargeWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentResponse> {
        const response = await this.rechargeWalletRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
