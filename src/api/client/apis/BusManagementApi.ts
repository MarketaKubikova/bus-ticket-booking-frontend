/* tslint:disable */
/* eslint-disable */
/**
 * Bus Ticket Booking API
 * API for managing bus ticket booking application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BusRequest,
  BusResponse,
} from '../models/index';
import {
    BusRequestFromJSON,
    BusRequestToJSON,
    BusResponseFromJSON,
    BusResponseToJSON,
} from '../models/index';

export interface CreateBusRequest {
    busRequest: BusRequest;
}

export interface GetBusByIdRequest {
    id: number;
}

/**
 * 
 */
export class BusManagementApi extends runtime.BaseAPI {

    /**
     * Create a new bus in the system. Only accessible by users with ADMIN role.
     * Create a new bus
     */
    async createBusRaw(requestParameters: CreateBusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusResponse>> {
        if (requestParameters['busRequest'] == null) {
            throw new runtime.RequiredError(
                'busRequest',
                'Required parameter "busRequest" was null or undefined when calling createBus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/buses`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BusRequestToJSON(requestParameters['busRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusResponseFromJSON(jsonValue));
    }

    /**
     * Create a new bus in the system. Only accessible by users with ADMIN role.
     * Create a new bus
     */
    async createBus(requestParameters: CreateBusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusResponse> {
        const response = await this.createBusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all buses in the system. Only accessible by users with ADMIN role.
     * Get all buses
     */
    async getAllBusesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusResponse<any>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/buses`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve a list of all buses in the system. Only accessible by users with ADMIN role.
     * Get all buses
     */
    async getAllBuses(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusResponse<any>> {
        const response = await this.getAllBusesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve details of a specific bus by its ID. Only accessible by users with ADMIN role.
     * Get bus by ID
     */
    async getBusByIdRaw(requestParameters: GetBusByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getBusById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/buses/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve details of a specific bus by its ID. Only accessible by users with ADMIN role.
     * Get bus by ID
     */
    async getBusById(requestParameters: GetBusByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusResponse> {
        const response = await this.getBusByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
